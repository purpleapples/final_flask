# -*- coding: utf-8 -*-
"""[컴퓨터] 5. 데이터 통계 및 시각화.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18cxKYLM4MWqc7YJRkPEGju_4os7CLdxW

# 라이브러리 설정 및 DB 연결
"""

# 라이브러리 설치

from pymongo import MongoClient
from tqdm.notebook import tqdm
import pandas as pd
import numpy as np
import re
import itertools

import pandas_bokeh
from bokeh.layouts import gridplot
from bokeh.embed import json_item
# from bokeh.io import output_file
# from bokeh.io import show

# MongoDB 연결
client = MongoClient("mongodb://issueWriter:final@18.223.118.236", 27017)
db = client.issue_writer

client2 = MongoClient('mongodb://issueWriter:final@121.138.83.113', 27017)
db2 = client2.issue_writer
collection = db2.visual_compParts
"""# 데이터셋 준비"""

# 데이터 불러오기
data = pd.DataFrame(db.LSTM_label_compParts.find({}, {"_id":0, "board_content":0, "mix_token_noun":0, "label":0, "prediction":0, "difference":0}))
data_LSTM = pd.DataFrame(db.LSTM_label_compParts.find({"difference":True}, {"_id":0, "board_content":0, "mix_token_noun":0, "label":0, "prediction":0, "difference":0}))

df_mix = data.copy()
df_mix["count"] = 1

df_mix_LSTM = data_LSTM.copy()
df_mix_LSTM["count"] = 1

# 데이터 날짜순으로 정렬
df_mix.sort_values(by=["datetime"], ascending=False, inplace=True)
df_mix.reset_index(drop=True, inplace=True)

df_mix_LSTM.sort_values(by=["datetime"], ascending=False, inplace=True)
df_mix_LSTM.reset_index(drop=True, inplace=True)

"""# 통계된 데이터 저장"""

def save_bokeh_json_to_mongo_db(plot, graph_sort, period, *date, info=None):
    visual_info = dict()
    json_plot = json_item(plot)

    if period == "week":
        visual_info["year"] = date[0]
        visual_info["month"] = date[1]
        visual_info["week"] = date[2]
    elif period == "month":
        visual_info["year"] = date[0]
        visual_info["month"] = date[1]
    elif period == "year":
        visual_info["year"] = date[0]
    
    visual_info["graphSort"] = graph_sort
    visual_info["period"] = period
    visual_info["info"] = info
    visual_info["plot"] = json_plot
    print(json_plot)

    db.visual_compParts.insert_one(visual_info)

"""## 기간별 데이터양

### [총량 막대그래프 / 선그래프(%)]
  - 주별 데이터 발생량
  - 월별 데이터 발생량
  - 년별 데이터 발생량
"""

# 주별, 월별, 일별 데이터 그룹
df_group_month = df_mix.groupby(["year", "month"])
df_group_week = df_mix.groupby(["year", "month", "weekofyear"])
df_group_day = df_mix.groupby(["year", "month", "weekofyear", "day"])

df_group_month = df_group_month.sum()
df_group_week = df_group_week.sum()
df_group_day = df_group_day.sum()

# 주별 데이터 발생량
pivot = df_group_day.reset_index()
pivot["index"] = pivot["year"] + "-" + pivot["month"] + "-" + pivot["day"]
pivot.drop(["day"], axis=1, inplace=True)
pivot.set_index(["year", "weekofyear"], inplace=True)

for year, weekofyear in pivot.index.unique():
    temp = pivot.xs((year, weekofyear))
    month = temp["month"][0]
    pivot_plot = temp.set_index("index")
    pivot_plot.drop(["month"], axis=1, inplace=True)

    plot = pivot_plot.plot_bokeh(kind = "bar",
                                 title = year + "년 " + month + "월 " + weekofyear + "주 총 데이터량",
                                 xlabel = "날짜 (년-월-일)",
                                 ylabel = "빈도수",
                                 color = "pink",
                                 toolbar_location = None,
                                 show_figure = False)
    save_bokeh_json_to_mongo_db(plot, "dataOccur", "week", year, month, weekofyear)

    pivot_plot["count"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind = "line",
                                 title = year + "년 " + month + "월 " + weekofyear + "주 총 데이터량",
                                 xlabel = "날짜 (년-월-일)",
                                 ylabel = "빈도수",
                                 color = "pink",
                                 toolbar_location = None,
                                 show_figure = False)
    save_bokeh_json_to_mongo_db(plot, "dataFlow", "week", year, month, weekofyear)


# 월별 데이터 발생량
pivot = df_group_week.reset_index()
pivot["index"] = pivot["year"] + "-" + pivot["weekofyear"]
pivot.drop(["weekofyear"], axis=1, inplace=True)
pivot.set_index(["year", "month"], inplace=True)

for year, month in pivot.index.unique():
    temp = pivot.xs((year, month))
    pivot_plot = temp.set_index("index")

    plot = pivot_plot.plot_bokeh(kind = "bar",
                                 title = year + "년 " + month + "월 총 데이터량",
                                 xlabel = "날짜 (년-주차)",
                                 ylabel = "빈도수",
                                 color = "pink",
                                 toolbar_location = None,
                                 show_figure = False)
    save_bokeh_json_to_mongo_db(plot, "dataOccur", "month", year, month)

    pivot_plot["count"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind = "line",
                                 title = year + "년 " + month + "월 총 데이터량",
                                 xlabel = "날짜 (년-주차)",
                                 ylabel = "빈도수",
                                 color = "pink",
                                 toolbar_location = None,
                                 show_figure = False)
    save_bokeh_json_to_mongo_db(plot, "dataFlow", "month", year, month)

# 년별 데이터 발생량
pivot = df_group_month.reset_index()
pivot["index"] = pivot["year"] + "-" + pivot["month"]
pivot.drop(["month"], axis=1, inplace=True)
pivot.set_index(["year"], inplace=True)

for year in pivot.index.unique():
    temp = pivot.xs(year)
    if type(temp) is pd.core.series.Series:
        pivot_plot = pd.DataFrame(temp).transpose().set_index("index")
        pivot_plot = pivot_plot.astype("int")
    else:
        pivot_plot = temp.set_index("index")

    plot = pivot_plot.plot_bokeh(kind = "bar",
                                 title = year + "년 총 데이터량",
                                 xlabel = "날짜 (년)",
                                 ylabel = "빈도수",
                                 color = "pink",
                                 toolbar_location = None,
                                 show_figure = False)
    save_bokeh_json_to_mongo_db(plot, "dataOccur", "year", year)

    pivot_plot["count"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind = "line",
                                 title = year + "년 총 데이터량",
                                 xlabel = "날짜 (년)",
                                 ylabel = "빈도수",
                                 color = "pink",
                                 toolbar_location = None,
                                 show_figure = False)
    save_bokeh_json_to_mongo_db(plot, "dataFlow", "year", year)

"""## 기간별 데이터 발생량 (카테고리별)

### [막대 그래프]
  - 주별 데이터 발생량
  - 월별 데이터 발생량
  - 년별 데이터 발생량
"""

# 주별, 월별, 일별 데이터 그룹 (카테고리별)
df_group_month = df_mix.groupby(["year", "month", "category"])
df_group_week = df_mix.groupby(["year", "month", "weekofyear", "category"])
df_group_day = df_mix.groupby(["year", "month", "weekofyear", "day", "category"])

df_group_month = df_group_month.sum().reset_index()
df_group_week = df_group_week.sum().reset_index()
df_group_day = df_group_day.sum().reset_index()

# 주별 데이터 발생량 (카테고리별)
pivot = df_group_day.pivot(index=("year", "month", "weekofyear", "day"), columns="category", values="count")
pivot.fillna(0, inplace=True)
pivot.reset_index(inplace=True)
pivot["index"] = pivot["year"] + "-" + pivot["month"] + "-" + pivot["day"]
pivot.drop(["day"], axis=1, inplace=True)
pivot.set_index(["year", "weekofyear"], inplace=True)

for year, weekofyear in pivot.index.unique():
    temp = pivot.xs((year, weekofyear))
    month = temp["month"][0]

    pivot_plot = temp.set_index("index")
    pivot_plot.drop(["month"], axis=1, inplace=True)
    plot = pivot_plot.plot_bokeh(kind="bar",
                                 title=year + "년 " + month + "월 " + weekofyear + "주 카테고리별 데이터량",
                                 xlabel="날짜 (년-월-일)",
                                 ylabel="빈도수",
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "categoryOccur", "week", year, month, weekofyear)

# 월별 데이터 발생량 (카테고리별)
pivot = df_group_week.pivot(index=("year", "month", "weekofyear"), columns="category", values="count")
pivot.fillna(0, inplace=True)
pivot.reset_index(inplace=True)
pivot["index"] = pivot["year"] + "-" + pivot["weekofyear"]
pivot.drop(["weekofyear"], axis=1, inplace=True)
pivot.set_index(["year", "month"], inplace=True)

for year, month in pivot.index.unique():
    temp = pivot.xs((year, month))

    pivot_plot = temp.set_index("index")
    plot = pivot_plot.plot_bokeh(kind="bar",
                                 title=year + "년 " + month + "월 카테고리별 데이터량",
                                 xlabel="날짜 (년-주차)", ylabel="빈도수",
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "categoryOccur", "month", year, month)

# 년별 데이터 발생량 (카테고리별)
pivot = df_group_month.pivot(index=("year", "month"), columns="category", values="count")
pivot.fillna(0, inplace=True)
pivot.reset_index(inplace=True)
pivot["index"] = pivot["year"] + "-" + pivot["month"]
pivot.drop(["month"], axis=1, inplace=True)
pivot.set_index(["year"], inplace=True)

for year in pivot.index.unique():
    temp = pivot.xs(year)
    if type(temp) is pd.core.series.Series:
        pivot_plot = pd.DataFrame(temp).transpose().set_index("index")
        pivot_plot = pivot_plot.astype("int")
    else:
        pivot_plot = temp.set_index("index")

    plot = pivot_plot.plot_bokeh(kind="bar",
                                 title=year + "년 카테고리별 데이터량", xlabel="날짜 (년)",
                                 ylabel="빈도수",
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "categoryOccur", "year", year)

"""### [파이 플롯]
  - 주별 데이터 발생량
  - 월별 데이터 발생량
  - 년별 데이터 발생량
"""

# 주별, 월별, 일별 데이터 그룹 (카테고리별)
df_group_year = df_mix.groupby(["year", "category"])
df_group_month = df_mix.groupby(["year", "month", "category"])
df_group_week = df_mix.groupby(["year", "month", "weekofyear", "category"])

df_group_year = df_group_year.sum().reset_index()
df_group_month = df_group_month.sum().reset_index()
df_group_week = df_group_week.sum().reset_index()

# 주별 데이터 발생량 (카테고리별)
pivot = df_group_week.copy()
pivot.set_index(["year", "weekofyear"], inplace=True)

for year, weekofyear in pivot.index.unique():
    temp = pivot.xs((year, weekofyear))
    month = temp["month"][0]

    pivot_plot = temp.set_index("category", drop=False)
    pivot_plot.drop(["month"], axis=1, inplace=True)
    pivot_plot["percent"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind="pie",
                                 y="count",
                                 title=year + "년 " + month + "월 " + weekofyear + "주 카테고리별 데이터량",
                                 hovertool_string="""
                                 <font color='pinkblue'>category</font>&nbsp;: @category <br>
                                 <font color='pinkblue'>count</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: @count <br>
                                 <font color='pinkblue'>percent</font>&nbsp;&nbsp;&nbsp;: @percent %
                                 """,
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "categoryComparison", "week", year, month, weekofyear)

# 월별 데이터 발생량 (카테고리별)
pivot = df_group_month.copy()
pivot.set_index(["year", "month"], inplace=True)

for year, month in pivot.index.unique():
    temp = pivot.xs((year, month))

    pivot_plot = temp.set_index("category", drop=False)
    pivot_plot["percent"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind="pie",
                                 y="count",
                                 title=year + "년 " + month + "월 카테고리별 데이터량",
                                 hovertool_string="""
                                 <font color='pinkblue'>category</font>&nbsp;: @category <br>
                                 <font color='pinkblue'>count</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: @count <br>
                                 <font color='pinkblue'>percent</font>&nbsp;&nbsp;&nbsp;: @percent %
                                 """,
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "categoryComparison", "month", year, month)

# 년별 데이터 발생량 (카테고리별)
pivot = df_group_year.copy()
pivot.set_index(["year"], inplace=True)

for year in pivot.index.unique():
    temp = pivot.xs(year)

    pivot_plot = temp.set_index("category", drop=False)
    pivot_plot["percent"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind="pie",
                                 y="count",
                                 title=year + "년 카테고리별 데이터량",
                                 hovertool_string="""
                                 <font color='pinkblue'>category</font>&nbsp;: @category <br>
                                 <font color='pinkblue'>count</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: @count <br>
                                 <font color='pinkblue'>percent</font>&nbsp;&nbsp;&nbsp;: @percent %
                                 """,
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "categoryComparison", "year", year)

"""## 모델이 사용자가 정한 category와 다르다고 판별한 데이터의 수량

### [파이 플롯]
  - 주별 데이터 발생량
  - 월별 데이터 발생량
  - 년별 데이터 발생량
"""

# 주별, 월별, 일별 데이터 그룹 (카테고리별)
df_group_year = df_mix_LSTM.groupby(["year", "category"])
df_group_month = df_mix_LSTM.groupby(["year", "month", "category"])
df_group_week = df_mix_LSTM.groupby(["year", "month", "weekofyear", "category"])

df_group_year = df_group_year.sum().reset_index()
df_group_month = df_group_month.sum().reset_index()
df_group_week = df_group_week.sum().reset_index()

# 주별 데이터 발생량 (카테고리별)
pivot = df_group_week.copy()
pivot.set_index(["year", "weekofyear"], inplace=True)

for year, weekofyear in pivot.index.unique():
    temp = pivot.xs((year, weekofyear))
    month = temp["month"][0]

    pivot_plot = temp.set_index("category", drop=False)
    pivot_plot.drop(["month"], axis=1, inplace=True)
    pivot_plot["percent"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind="pie",
                                 y="count",
                                 title=year + "년 " + month + "월 " + weekofyear + "주 카테고리별 데이터 변화량",
                                 hovertool_string="""
                                 <font color='pinkblue'>category</font>&nbsp;: @category <br>
                                 <font color='pinkblue'>count</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: @count <br>
                                 <font color='pinkblue'>percent</font>&nbsp;&nbsp;&nbsp;: @percent %
                                 """,
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "dataModelClassification", "week", year, month, weekofyear)

# 월별 데이터 발생량 (카테고리별)
pivot = df_group_month.copy()
pivot.set_index(["year", "month"], inplace=True)

for year, month in pivot.index.unique():
    temp = pivot.xs((year, month))

    pivot_plot = temp.set_index("category", drop=False)
    pivot_plot["percent"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind="pie",
                                 y="count",
                                 title=year + "년 " + month + "월 카테고리별 데이터 변화량",
                                 hovertool_string="""
                                 <font color='pinkblue'>category</font>&nbsp;: @category <br>
                                 <font color='pinkblue'>count</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: @count <br>
                                 <font color='pinkblue'>percent</font>&nbsp;&nbsp;&nbsp;: @percent %
                                 """,
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "dataModelClassification", "month", year, month)

# 년별 데이터 발생량 (카테고리별)
pivot = df_group_year.copy()
pivot.set_index(["year"], inplace=True)

for year in pivot.index.unique():
    temp = pivot.xs(year)

    pivot_plot = temp.set_index("category", drop=False)
    pivot_plot["percent"] = (pivot_plot["count"] / pivot_plot["count"].sum()) * 100
    plot = pivot_plot.plot_bokeh(kind="pie",
                                 y="count",
                                 title=year + "년 카테고리별 데이터 변화량",
                                 hovertool_string="""
                                 <font color='pinkblue'>category</font>&nbsp;: @category <br>
                                 <font color='pinkblue'>count</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: @count <br>
                                 <font color='pinkblue'>percent</font>&nbsp;&nbsp;&nbsp;: @percent %
                                 """,
                                 toolbar_location=None,
                                 show_figure = False)

    save_bokeh_json_to_mongo_db(plot, "dataModelClassification", "year", year)









